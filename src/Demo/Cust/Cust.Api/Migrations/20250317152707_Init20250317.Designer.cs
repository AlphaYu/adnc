// <auto-generated />
using System;
using Adnc.Infra.Repository.EfCore.MySql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Adnc.Demo.Cust.Api.Migrations
{
    [DbContext(typeof(MySqlDbContext))]
    [Migration("20250317152707_Init20250317")]
    partial class Init20250317
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4 ");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Adnc.Demo.Cust.Api.Repository.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasComment("");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("account")
                        .HasComment("");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("createby")
                        .HasColumnOrder(100)
                        .HasComment("创建人");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasColumnOrder(101)
                        .HasComment("创建时间/注册时间");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modifyby")
                        .HasColumnOrder(102)
                        .HasComment("最后更新人");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modifytime")
                        .HasColumnOrder(103)
                        .HasComment("最后更新时间");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("nickname")
                        .HasComment("");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("password")
                        .HasComment("");

                    b.Property<string>("Realname")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("realname")
                        .HasComment("");

                    b.HasKey("Id")
                        .HasName("pk_cust_customer");

                    b.ToTable("cust_customer", null, t =>
                        {
                            t.HasComment("客户表");
                        });
                });

            modelBuilder.Entity("Adnc.Demo.Cust.Api.Repository.Entities.Finance", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasComment("");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("account")
                        .HasComment("");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("balance")
                        .HasComment("");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("createby")
                        .HasColumnOrder(100)
                        .HasComment("创建人");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasColumnOrder(101)
                        .HasComment("创建时间/注册时间");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modifyby")
                        .HasColumnOrder(102)
                        .HasComment("最后更新人");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modifytime")
                        .HasColumnOrder(103)
                        .HasComment("最后更新时间");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("rowversion")
                        .HasColumnOrder(98)
                        .HasComment("");

                    b.HasKey("Id")
                        .HasName("pk_cust_finance");

                    b.ToTable("cust_finance", null, t =>
                        {
                            t.HasComment("客户财务表");
                        });
                });

            modelBuilder.Entity("Adnc.Demo.Cust.Api.Repository.Entities.TransactionLog", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasComment("");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("account")
                        .HasComment("");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("amount")
                        .HasComment("");

                    b.Property<decimal>("ChangedAmount")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("changedamount")
                        .HasComment("");

                    b.Property<decimal>("ChangingAmount")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("changingamount")
                        .HasComment("");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("createby")
                        .HasColumnOrder(100)
                        .HasComment("创建人");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasColumnOrder(101)
                        .HasComment("创建时间/注册时间");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customerid")
                        .HasComment("");

                    b.Property<int>("ExchageStatus")
                        .HasColumnType("int")
                        .HasColumnName("exchagestatus")
                        .HasComment("");

                    b.Property<int>("ExchangeType")
                        .HasColumnType("int")
                        .HasColumnName("exchangetype")
                        .HasComment("");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("remark")
                        .HasComment("");

                    b.HasKey("Id")
                        .HasName("pk_cust_transactionlog");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_cust_transactionlog_customerid");

                    b.ToTable("cust_transactionlog", null, t =>
                        {
                            t.HasComment("客户财务变动记录");
                        });
                });

            modelBuilder.Entity("Adnc.Shared.Repository.EfCoreEntities.EventTracker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("createby")
                        .HasComment("创建人");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createtime")
                        .HasComment("创建时间/注册时间");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("eventid")
                        .HasComment("");

                    b.Property<string>("TrackerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("trackername")
                        .HasComment("");

                    b.HasKey("Id")
                        .HasName("pk_cust_eventtracker");

                    b.HasIndex(new[] { "EventId", "TrackerName" }, "uk_eventid_trackername")
                        .IsUnique()
                        .HasDatabaseName("ix_cust_eventtracker_eventid_trackername");

                    b.ToTable("cust_eventtracker", null, t =>
                        {
                            t.HasComment("事件跟踪/处理信息");
                        });
                });

            modelBuilder.Entity("Adnc.Demo.Cust.Api.Repository.Entities.Finance", b =>
                {
                    b.HasOne("Adnc.Demo.Cust.Api.Repository.Entities.Customer", null)
                        .WithOne("FinanceInfo")
                        .HasForeignKey("Adnc.Demo.Cust.Api.Repository.Entities.Finance", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cust_finance_cust_customer_id");
                });

            modelBuilder.Entity("Adnc.Demo.Cust.Api.Repository.Entities.TransactionLog", b =>
                {
                    b.HasOne("Adnc.Demo.Cust.Api.Repository.Entities.Customer", null)
                        .WithMany("TransactionLogs")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cust_transactionlog_cust_customer_customerid");
                });

            modelBuilder.Entity("Adnc.Demo.Cust.Api.Repository.Entities.Customer", b =>
                {
                    b.Navigation("FinanceInfo")
                        .IsRequired();

                    b.Navigation("TransactionLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
