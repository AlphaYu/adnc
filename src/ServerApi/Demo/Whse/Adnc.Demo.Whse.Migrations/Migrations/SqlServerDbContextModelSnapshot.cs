// <auto-generated />
using System;
using Adnc.Infra.Repository.EfCore.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Adnc.Demo.Whse.Migrations.Migrations
{
    [DbContext(typeof(SqlServerDbContext))]
    partial class SqlServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Adnc.Shared.Repository.EfEntities.EventTracker", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasComment("");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("createby")
                        .HasComment("创建人");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间/注册时间");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("eventid")
                        .HasComment("");

                    b.Property<string>("TrackerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("trackername")
                        .HasComment("");

                    b.HasKey("Id")
                        .HasName("pk_eventtracker");

                    b.HasIndex(new[] { "EventId", "TrackerName" }, "uk_eventid_trackername")
                        .IsUnique()
                        .HasDatabaseName("ix_eventtracker_eventid_trackername");

                    b.ToTable("eventtracker", (string)null);

                    b.HasComment("事件跟踪/处理信息");
                });

            modelBuilder.Entity("Adnc.Demo.Whse.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasComment("");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("createby")
                        .HasComment("");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("");

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("describe")
                        .HasComment("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("name")
                        .HasComment("");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("price")
                        .HasComment("");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("rowversion")
                        .HasComment("");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("sku")
                        .HasComment("");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("unit")
                        .HasComment("");

                    b.HasKey("Id")
                        .HasName("pk_product");

                    b.ToTable("product", (string)null);

                    b.HasComment("");
                });

            modelBuilder.Entity("Adnc.Demo.Whse.Domain.Aggregates.WarehouseAggregate.InventoryChangesLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.HasKey("Id")
                        .HasName("pk_inventorychangeslog");

                    b.ToTable("inventorychangeslog", (string)null);

                    b.HasComment("");
                });

            modelBuilder.Entity("Adnc.Demo.Whse.Domain.Aggregates.WarehouseAggregate.Warehouse", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasComment("");

                    b.Property<int>("BlockedQty")
                        .HasColumnType("int")
                        .HasColumnName("blockedqty")
                        .HasComment("");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("createby")
                        .HasComment("");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("productid")
                        .HasComment("");

                    b.Property<int>("Qty")
                        .HasColumnType("int")
                        .HasColumnName("qty")
                        .HasComment("");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("rowversion")
                        .HasComment("");

                    b.HasKey("Id")
                        .HasName("pk_warehouse");

                    b.ToTable("warehouse", (string)null);

                    b.HasComment("货架");
                });

            modelBuilder.Entity("Adnc.Demo.Whse.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.OwnsOne("Adnc.Demo.Whse.Domain.Aggregates.ProductAggregate.ProductStatus", "Status", b1 =>
                        {
                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("ChangesReason")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("statuschangesreason");

                            b1.Property<int>("Code")
                                .HasColumnType("int")
                                .HasColumnName("statuscode");

                            b1.HasKey("ProductId");

                            b1.ToTable("product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_product_product_id");
                        });

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("Adnc.Demo.Whse.Domain.Aggregates.WarehouseAggregate.Warehouse", b =>
                {
                    b.OwnsOne("Adnc.Demo.Whse.Domain.Aggregates.WarehouseAggregate.WarehousePosition", "Position", b1 =>
                        {
                            b1.Property<long>("WarehouseId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("positioncode");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("positiondescription");

                            b1.HasKey("WarehouseId");

                            b1.ToTable("warehouse");

                            b1.WithOwner()
                                .HasForeignKey("WarehouseId")
                                .HasConstraintName("fk_warehouse_warehouse_id");
                        });

                    b.Navigation("Position")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
